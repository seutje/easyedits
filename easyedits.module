<?php

/**
 * @file
 * Easy Edits module,
 * largely based on a sandbox project by kmadel (http://drupal.org/user/288818).
 */

/**
 * Implementation of hook_field_formatter_info().
 */
function easyedits_field_formatter_info() {
  return array(
    'easyedits' => array(
      'label' => t('Easily editable'),
      'field types' => array('text','text_long','text_with_summary','list_text'),
      'settings' => array(
        'fallback_format' => NULL,
        'view_mode' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function easyedits_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  //This gets the view_mode where our settings are stored
  $display = $instance['display'][$view_mode];
  //This gets the actual settings
  $settings = $display['settings'];  
  $element = array();
  
  //had an issue when using this formatter in a View, results in a Fatal error: undefined function field_ui_formatter_options() i
  if (!function_exists('field_ui_formatter_options')) {
    module_load_include('inc', 'field_ui', 'field_ui.admin');
  }
  
  //fallback formatter
  // Get the list of formatters for this field type, and remove our own.
  $formatters = field_ui_formatter_options($field['type']);
  unset($formatters['easyedits']); 
  $element['fallback_format'] = array(
    '#type' => 'select',
    '#title' => t('Fallback formatter'),
    '#options' => $formatters,
    '#description'    => t('The format to be used when not in edit mode.'),
    '#default_value' => $settings['fallback_format'],
  );
  // We need the view mode when ajaxing
  $element['view_mode'] = array(
    '#type' => 'value',
    '#value' => $view_mode,
  );
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function easyedits_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $formatter_type = field_info_formatter_types($settings['fallback_format']);//get label of fallback formater for summary info
  $summary = t('Fallback format: @fallback_format format (Select format to be used when not in edit mode.)', array(
    '@fallback_format'     => $formatter_type['label'],
  ));
  $summary .= ' view mode: ' . $settings['view_mode'];
  // @todo: Support fallback format settings.
  return $summary;
}


/**
 * Format a field using the fallback formatter of the editable field.
 */
function easyedits_fallback_formatter($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // Set the fallback formatter.
  $display['type'] = $display['settings']['fallback_format'];
  $formatter_type = field_info_formatter_types($display['type']);
  $display['module'] = $formatter_type['module'];

  // Clone the entity to avoid messing with it.
  $cloned_entity = clone $entity;

  return field_view_field($entity_type, $cloned_entity, $field['field_name'], $display, $langcode);
}

/**
 * Implements hook_field_formatter_view().
 */
function easyedits_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // See if access to this form element is restricted,
  // if so, skip widget processing and just set the value.
  if (!entity_access('update', $entity_type, $entity) || !field_access('edit', $field, $entity_type, $entity)) {
    // Can't edit.
    return easyedits_fallback_formatter($entity_type, $entity, $field, $instance, $langcode, $items, $display);
  }
  // This usually isn't loaded as we aren't on the node edit page.
  if (!function_exists('node_form')) {
    module_load_include('inc', 'node', 'node.pages');
  }
  $entity->easyedits = array(
    'field_name' => $field['field_name'],
    'view_mode' => $display['settings']['view_mode'],
  );
  // @todo: Support other entities
  $form = drupal_get_form($entity->type . '_node_form', $entity);
  // @todo: figure out if it's better to render one form per node.
  $element = array();
  foreach ($items as $delta => $item) {
    $markup = '<div class="easyedits-wrapper">';
    $markup .= '<div class="easyedits-output">' . $item['value'] . '</div>';
    $markup .= '<div class="easyedits-form element-invisible">' . render($form) . '</div>';
    $markup .= '</div>';
    $element[$delta] = array('#markup' => $markup);
  }

  return $element;
}

/**
 * Implements hook_node_form_alter(). 
 */
function easyedits_form_node_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#node']->easyedits)) {
    _easyedits_node_form_alter($form, $form_state, $form_id);
  }
}

/**
 * AJAX form submit callback.
 */
function easyedits_ajax($form, $form_state) {
  $node = $form['#node'];
  $fieldname = $form['easyedits-fieldname']['#value'];
  $view_mode = $form['easyedits-viewmode']['#value'];
  $output = field_view_field('node', $node, $fieldname, $view_mode); // Fatal error:  Cannot unset string offsets in [drupal root]/modules/field/field.default.inc on line 42
  return $output;
}

/**
 * Node form alter helper.
 * @param type $form
 * @param type $form_state
 * @param type $form_id
 */
function _easyedits_node_form_alter(&$form, &$form_state, $form_id) {
  $field = $form['#node']->easyedits['field_name'];
  $view_mode = $form['#node']->easyedits['view_mode'];
  // Disable access to most form elements
  foreach ($form as $delta => $item) {
    if ($delta != 'actions' && $delta != $field && is_array($item) && isset($item['#type']) && $item['#type'] != 'hidden' && $item['#type'] != 'value') {
      $form[$delta]['#access'] = FALSE;
    }
  }
  // We're gonna need the field name and view mode.
  $form['easyedits-fieldname'] = array(
    '#type' => 'value',
    '#value' => $field,
  );
  $form['easyedits-viewmode'] = array(
    '#type' => 'value',
    '#value' => $view_mode,
  );
  // Gotta make sure the js file gets added after wysiwyg.js (for detach)
  drupal_add_js(base_path() . drupal_get_path('module', 'easyedits') . '/js/easyedits.js', array('scope' => 'footer', 'weight' => JS_LIBRARY + 110));
  // @todo: Figure out possible support for preview/delete.
  unset($form['actions']['preview']);
  unset($form['actions']['delete']);
  $form['actions']['submit']['#ajax'] = array(
    'callback' => 'easyedits_ajax',
    'wrapper' => 'easyedits-active-wrapper',
    'effect' => 'fade',
  );
  form_load_include($form_state, 'inc', 'node', 'node.pages');
}
